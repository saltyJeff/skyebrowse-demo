{"version":3,"sources":["NavMenu/Routes.ts","AppState.ts","NavMenu/NavMenu.tsx","Home/Home.tsx","Models/ModelCard.tsx","Models/Models.tsx","Login/Login.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Routes","AppState","Object","classCallCheck","this","sb","initializerDefineProperty","_descriptor","SkyeBrowse","observable","window","src_AppState","NavMenu","observer","props","_this","possibleConstructorReturn","getPrototypeOf","call","menuClick","e","setState","selectedKey","key","index","parseInt","state","location","hash","concat","react","id","menu","theme","onClick","mode","selectedKeys","map","val","Item","disabled","loggedIn","toUpperCase","React","cachedUser","Home","loadProfile","loading","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","getProfile","sent","user","stop","setTimeout","history","className","name","card","title","style","width","email","approved","modelCount","org","credits","creditsExpire","ModelCard","model","created","toLocaleString","vidUploaded","gpsUploaded","modelCreated","href","modelUrl","target","controls","src","vidUrl","Models","refreshPage","profile","loadModels","page","_ref","modelPage","abrupt","getModels","models","_x","apply","arguments","then","_this2","pagination","simple","defaultPageSize","current","total","onChange","ModelCard_ModelCard","Login","login","password","replace","t0","message","error","_","console","log","catch","_this3","maxWidth","marginLeft","marginRight","input","placeholder","value","onPressEnter","Password","es_button","type","icon","App","react_default","createElement","react_router_dom","NavMenu_NavMenu_NavMenu","height","react_router","path","component","to","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f03bd448.chunk.js","sourcesContent":["export const Routes: string[] = [\r\n    'home',\r\n    'models'\r\n]","import { SkyeBrowse } from 'skyebrowse-client-js'\r\nimport { observable } from 'mobx'\r\nclass AppState {\r\n    sb: SkyeBrowse\r\n    @observable loggedIn: boolean = false\r\n    constructor() {\r\n        this.sb = new SkyeBrowse()\r\n    }\r\n}\r\n(window as any).sb = new SkyeBrowse();\r\nexport default new AppState()","import * as React from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport { Menu, Icon, Switch } from 'antd'\r\nimport \"./NavMenu.css\"\r\nimport { ClickParam } from 'antd/lib/menu';\r\nimport { Routes } from './Routes';\r\nimport AppState from '../AppState';\r\nimport { History } from 'history'\r\n\r\ninterface State {\r\n    selectedKey: string\r\n}\r\n@observer\r\nexport default class NavMenu extends React.Component<{}, State> {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            selectedKey: '0' \r\n        }\r\n    }\r\n    render () {\r\n        return (\r\n            <div id=\"nav-menu\">\r\n                <Menu\r\n                    theme=\"dark\"\r\n                    onClick={this.menuClick}\r\n                    mode=\"inline\"\r\n                    selectedKeys={[this.state.selectedKey]}\r\n                >\r\n                {\r\n                    Routes.map((val, index) => {\r\n                        return <Menu.Item key={index+''} disabled={!AppState.loggedIn}>{val.toUpperCase()}</Menu.Item>\r\n                    })\r\n                }\r\n                </Menu>\r\n            </div>\r\n        )\r\n    }\r\n    menuClick = (e: ClickParam) => {\r\n        this.setState({\r\n            selectedKey: e.key\r\n        }, () => {\r\n            const index = parseInt(this.state.selectedKey)\r\n            window.location.hash = `#/${Routes[index]}`\r\n        })\r\n    }\r\n}","import * as React from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport { History } from 'history'\r\nimport AppState from '../AppState';\r\nimport { User } from 'skyebrowse-client-js';\r\nimport { Card } from 'antd'\r\n\r\ninterface Props {\r\n    history: History\r\n}\r\ninterface State {\r\n    loading: boolean\r\n    user: User\r\n}\r\nlet cachedUser = null\r\n@observer\r\nexport default class Home extends React.Component<Props, State> {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            loading: false,\r\n            user: cachedUser\r\n        }\r\n        setTimeout(this.loadProfile, 10) //calm dowm the setstate before state defined error\r\n    }\r\n    componentDidUpdate(props: Props) {\r\n        if(props.history.location.hash != this.props.history.location.hash) {\r\n            this.loadProfile()\r\n        }\r\n    }\r\n    render () {\r\n        if(!this.state.user) {\r\n            return <div>Loading...</div>\r\n        }\r\n        return (\r\n            <div className=\"page\">\r\n                <h1>Welcome {this.state.user.name}</h1>\r\n                <Card title=\"My Stats\" style={{width: 600}}>\r\n                    <h2>Email: {this.state.user.email}</h2>\r\n                    <h2>Approved: {this.state.user.approved+''}</h2>\r\n                    <h2>Model Count: {this.state.user.modelCount}</h2>\r\n                </Card>\r\n                <Card title={`${this.state.user.org.name}'s Stats`} style={{width: 600}}>\r\n                    <h2>Credits: {this.state.user.org.credits}</h2>\r\n                    <h2>Credits Expire: {this.state.user.org.creditsExpire}</h2>\r\n                    <h2>Model Count: {this.state.user.org.modelCount}</h2>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n    loadProfile = () => {\r\n        if(this.state.loading) {\r\n            return\r\n        }\r\n        this.setState({loading: true}, async () => {\r\n            cachedUser = await AppState.sb.getProfile()\r\n            this.setState({\r\n                user: cachedUser,\r\n                loading: false\r\n            })\r\n        })\r\n    }\r\n}","import * as React from 'react'\r\nimport { Model } from 'skyebrowse-client-js';\r\nimport { Card } from 'antd';\r\n\r\ninterface Props {\r\n    model: Model\r\n    key: string\r\n    loading: boolean\r\n}\r\nexport default class ModelCard extends React.PureComponent<Props, {}> {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    render () {\r\n        const model = this.props.model\r\n        return (\r\n                <Card title={model.name} loading={this.props.loading} className=\"modelCard\">\r\n                    <p>Created: {model.created.toLocaleString()}</p>\r\n                    <ul>Upload statuses:\r\n                        <li>Video: {model.vidUploaded+''}</li>\r\n                        <li>GPS: {model.gpsUploaded+''}</li>\r\n                        <li>Model: {model.modelCreated+''}</li>\r\n                    </ul>\r\n                    {\r\n                        model.modelCreated && <p><a href={model.modelUrl} target=\"_blank\">View Model</a></p>\r\n                    }\r\n                    {\r\n                        model.vidUploaded && <video className=\"modelVideo\" controls src={model.vidUrl}></video>\r\n                    }\r\n                </Card>\r\n        )\r\n    }\r\n}","import * as React from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport { Pagination } from 'antd'\r\nimport AppState from '../AppState';\r\nimport { History } from 'history'\r\nimport { Model } from 'skyebrowse-client-js';\r\nimport ModelCard from './ModelCard';\r\nimport './Models.css'\r\ninterface State {\r\n    modelCount: number\r\n    models: Model[]\r\n    page: number\r\n    loading: boolean\r\n}\r\ninterface Props {\r\n    history: History\r\n}\r\n@observer\r\nexport default class Models extends React.Component<Props, State> {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            modelCount: 0,\r\n            models: [],\r\n            page: 0,\r\n            loading: false\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        if(!AppState.sb.profile) {\r\n            AppState.sb.getProfile().then(this.refreshPage)\r\n        }\r\n        else {\r\n            this.refreshPage()\r\n        }\r\n    }\r\n    componentDidUpdate(props: Props) {\r\n        if(props.history.location.hash != this.props.history.location.hash) {\r\n            this.refreshPage()\r\n        }\r\n    }\r\n    render () {\r\n        return (\r\n            <div className=\"page\" id=\"modelPage\">\r\n                <Pagination simple defaultPageSize={10} current={this.state.page+1} total={this.state.modelCount} onChange={this.loadModels}/>\r\n                <div id=\"modelList\">\r\n                {\r\n                    this.state.models.map((val, key) => {\r\n                        return <ModelCard key={val.id} model={val} loading={this.state.loading}/>\r\n                    })\r\n                }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    refreshPage = () => {\r\n        this.setState({\r\n            modelCount: AppState.sb.profile.modelCount\r\n        })\r\n        this.loadModels(this.state.page+1)\r\n    }\r\n    loadModels = async (page: number) => {\r\n        if(this.state.loading) {\r\n           return \r\n        }\r\n        await this.setState({loading: true, page: page-1})\r\n        const modelPage = await AppState.sb.getModels(this.state.page)\r\n        this.setState({\r\n            loading: false,\r\n            page: modelPage.page,\r\n            models: modelPage.models\r\n        })\r\n    }\r\n}","import * as React from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport './Login.css'\r\nimport { Input, Button, Icon, message } from 'antd'\r\nimport AppState from '../AppState';\r\nimport { History } from 'history'\r\n\r\ninterface State {\r\n    email: string\r\n    password: string\r\n}\r\ninterface Props {\r\n    history: History\r\n}\r\n@observer\r\nexport default class Login extends React.Component<Props, State> {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            email: '',\r\n            password: ''\r\n        }\r\n    }\r\n    componentDidMount () {\r\n        AppState.sb.getModels(0)\r\n            .then(_ => {\r\n                console.log('auto login successful')\r\n                AppState.loggedIn = true\r\n                this.props.history.replace('/home')\r\n            })\r\n            .catch(e => {\r\n                console.error('no auto login for you: ', e)\r\n            })\r\n    }\r\n    render () {\r\n        return (\r\n            <div id=\"loginPage\" className=\"page\">\r\n                <div id=\"loginForm\">\r\n                    <img src=\"logo.png\" style={{width: 300, maxWidth: '50%', marginLeft: 'auto', marginRight: 'auto'}}/>\r\n                    <Input placeholder='email'\r\n                        onChange={(e) => this.setState({email: e.target.value})}\r\n                        onPressEnter={this.login}/>\r\n                    <Input.Password placeholder='password' \r\n                        onChange={(e) => this.setState({password: e.target.value})}\r\n                        onPressEnter={this.login} />\r\n\r\n                    <Button type=\"primary\" onClick={this.login}>\r\n                        Login\r\n                        <Icon type=\"right\" />\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    login = async () => {\r\n        try {\r\n            await AppState.sb.login(this.state.email, this.state.password)\r\n            AppState.loggedIn = true\r\n            this.props.history.replace('/home')\r\n        }\r\n        catch(e) {\r\n            message.error(e.message)\r\n        }\r\n    }\r\n}","import React from 'react'\nimport { HashRouter as Router, Route, Redirect } from \"react-router-dom\"\nimport NavMenu from './NavMenu/NavMenu';\nimport Home from './Home/Home';\nimport Models from './Models/Models';\nimport Login from './Login/Login';\n\n\nconst App: React.FC = () => {\n\treturn (\n\t\t<Router>\n\t\t\t<div id=\"content\">\n\t\t\t\t<NavMenu />\n\t\t\t\t<section style={{width: '100%', height: '100%'}}>\n\t\t\t\t\t<Route path=\"/home\" component={Home} />\n\t\t\t\t\t<Route path=\"/models\" component={Models} />\n\t\t\t\t\t<Route path=\"/login\" component={Login} />\n\t\t\t\t</section>\n\t\t\t\t<Redirect to=\"/login\" />\n\t\t\t</div>\n\t\t</Router>\n\t)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}